import numpy as np

class SARSA:

    def __init__(self, env, epsilon, alpha, gamma):
        self.env = env
        self.num_obs = self.env.observation_space.n
        self.num_action = self.env.action_space.n
        self.Q_table = np.zeros([self.num_obs, self.num_action]) # init Q(s,a) table
        self.epsilon = epsilon # epsilon in epsilon-greedy policy
        self.alpha = alpha # learning rate
        self.gamma = gamma # discount factor
    
    def take_action(self, state):  # 选取下一步的操作,具体实现为epsilon-贪婪
        if np.random.random() < self.epsilon:
            action = np.random.randint(self.num_action) # encourage exploration
        else:
            action = np.argmax(self.Q_table[state])
        return action
    
    def best_action(self, state):  # 用于打印策略
        Q_max = np.max(self.Q_table[state])
        a = [0 for _ in range(self.num_action)]
        for i in range(self.num_action):  # 若两个动作的价值一样,都会记录下来
            if self.Q_table[state, i] == Q_max:
                a[i] = 1
        return a
    
    def update(self, s0, a0, r, s1, a1): # update Q table, using the Q value generated by epsilon-greedy policy(on-policy).
        td_error = r + self.gamma * self.Q_table[s1, a1] - self.Q_table[s0, a0]
        self.Q_table[s0, a0] += self.alpha * td_error